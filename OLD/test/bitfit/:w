#define _XOPEN_SOURCE_EXTENDED = 1  /* extended character sets */
#include <stdlib.h>
#include <ncurses.h>
#include <panel.h>
#include <locale.h>
#include <stdarg.h>

#include "../src/ncolor.h"

int main(int argc, char *argv[])
{
        /*************************************************** init */
        /* UTF-8 and font settings */
        setlocale(LC_ALL,""); // UTF-8

        /* Start ncurses */
        initscr();            // Start ncurses
        start_color();        // Initialize color display 
        cbreak();	      // Disable line buffering
        noecho();             // Do not echo input
        curs_set(0);          // hide cursor
        /*************************************************** end init */

        WINDOW *win = newwin(LINES, COLS, 0, 0);
        PANEL *pan = new_panel(win);

        PALETTE *mypal = new_pal();

        char *ggr_path = (argv[1]!=NULL) ? argv[1] : "samples/GMT_haxby.ggr";

        pal_load(mypal, argv[1], 30);
        pal_testprint(win, mypal);
        update_panels();
        doupdate();

// ▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▐

        wchar_t *vert[8]={L"▁",L"▂",L"▃",L"▄",L"▅",L"▆",L"▇",L"█"};
        wchar_t *horz[8]={L"▏",L"▎",L"▍",L"▌",L"▋",L"▊",L"▉",L"█"};

        /*while (getch());*/

        int col, row, frac;

        float h;
        float v;
        #define DELAY 2.2

        /*for (col=0; col<COLS; col++) {*/
                /*for (row=0; row<LINES; row++) {*/

                        /*goto paint_row;*/

                        /*paint_column:*/

                        /*v = norm(row, 0, LINES);*/
                        /*for (frac=0; frac<8; frac++) {*/

                                /*[> top to bottom, left to right <] */
                                /*pal_printw(win, row, col, vert[frac], v, mypal);*/
                                /*[> bottom to top, right to left <]*/
                                /*pal_printw(win, (LINES-1)-row, (COLS-1)-col, vert[frac], v, mypal);*/

                                /*update_panels();*/
                                /*doupdate();*/
                                /*napms(DELAY);*/
                        /*}*/
                /*}*/
        /*}*/

        /*goto all_done;*/

        for (row=0; row<LINES; row++) {
                for (col=0; col<COLS; col++) {

                        h = norm(col, 0, COLS);
                        for (frac=0; frac<8; frac++) {

                                /* left to right, top to bottom */
                                pal_printw(win, row, col, horz[frac], h, mypal);
                                /* right to left, bottom to top */
                                pal_printw(win, (LINES-1)-row, (COLS-1)-col, horz[frac], h, mypal);

                                update_panels();
                                doupdate();
                                napms(DELAY);
                        }
                }
        }

        while ((getch()) != 'q');

        endwin(); /* end curses mode */
        return 0;
}
